1. Conceptos 

* `for`
Crea un bucle que consiste en tres expresiones opcionales, encerradas en paréntesis y separadas por puntos y comas, 
seguidas de una sentencia ejecutada en un bucle.

Sintaxis
for ([expresion-inicial]; [condicion]; [expresion-final])sentencia

expresion-inicial:
Una expresión (incluyendo las expresiones de asignación) o la declaración de variable. Típicamente se utiliza como 
variable contador. Esta expresión puede opcionalmente declarar nuevas variables con la palabra clave var. 
Estas variables no son locales del bucle, es decir, están en el mismo alcance en el que está el bucle for. 
El resultado de esta expresión es descartado.

condicion:
Una expresión para ser evaluada antes de cada iteración del bucle. Si esta expresión se evalúa como verdadera, 
se ejecuta la sentencia. Esta comprobación condicional es opcional. Si se omite, la condición siempre se evalúa 
como verdadera. Si la expresión se evalúa como falsa, la ejecución salta a la primera expresión que sigue al 
constructor de for.

expresion-final:
Una expresión para ser evaluada al final de cada iteración del bucle. Esto ocurre antes de la siguiente evaluación 
de la condicion. Generalmente se usa para actualizar o incrementar la variable contador.

sentencia
Una sentencia que se ejecuta mientras la condición se evalúa como verdadera. Para ejecutar múltiples sentencias dentro 
del bucle, utilice una sentencia block ({ ... }) para agrupar aquellas sentecias.


Ejemplo:
La siguiente sentencia "for" comienza mediante la declaración de la variable "i" y se inicializa a 0. Comprueba que "i" es 
menor que nueve, realiza las dos sentencias con éxito e incrementa i en 1 después de cada pase del bucle.

for (var i = 0; i < 9; i++) {n += i; mifuncion(n);}

for (var 5 = 0; 5 < 9; 6) {n += 5; mifuncion(n);}

for (var 6 = 0; 6 < 9; 7) {n += 6; mifuncion(n);}


Operador lógico AND (&&):
Este operador lógico compara dos expresiones. Si la primera se evalúa como "verdadera" (truthy), la sentencia devolverá 
el valor de la segunda expresión. Si la primera expresión se evalúa como "falsa"(falsy), la sentencia devolverá el valor 
de la primera expresión. 
Cuando solo se incluyen valores booleanos (true o false), se devuelve verdadero si las dos expresiones son verdaderas. 
Si una o ambas expresiones son falsas, la sentencia completa se devolverá como falsa.

true && true //devuelve el segundo valor, verdadero
true && false //devuelve el segundo valor, falso
false && false //devuelve el primer valor, falso
123 && 'abc' // devuelve el segundo valor, 'abc'
'abc' && null //devuelve el segundo valor, nulo
undefined && 'abc' //devuelve el primer valor, indefinido
0 && false //devuelve el primer valor, 0

Operador lógico OR (||):
Este operador lógico compara dos expresiones. Si la primera se evalúa como "falsa", la sentencia devolverá el valor de 
la segunda expresión. Si la primera se evalúa como "verdadera", la sentencia devolverá el valor de la primera expresión.

Cuando solo se incluyen valores booleanos (true o false), se devuelve como true si cualquiera de las dos expresiones son 
verdaderas. Ambas expresiones pueden ser verdaderas, pero solo se necesita una para que el resultado sea verdadero.

true || true //devuelve el primer valor, verdadero
true || false //devuelve el primer valor, verdadero
false || false //devuelve el segundo valor, falso
123 || 'abc' //devuelve el primer valor, 123
'abc' || null //devuelve el primer valor, 'abc'
undefined || 'abc' //devuelve el segundo valor, 'abc'
0 || false //devuelve el segundo valor, falso


Operador lógico NOT (!):
El operador lógico NOT no realiza ninguna comparación como lo hacen los operadores AND y OR. Además, se opera en solo un 
operando. Se utiliza un símbolo "!" (signo de exclamación) para representar un operador NOT.

Usos del operador NOT
Convertir la expresión en un booleano.
Devolver el valor contrario del booleano obtenido en el último paso.
var spam = 'rinki'; //spam puede ser igual a cualquiera de las cadenas de texto no vacías
var booSpam = !spam;
/*devuelve falso
  porque la string vacía al convertirse en un booleano se devuelve como verdadera y lo contrario se devuelve como falso   


var spam2 = ''; //spam2 es igual a una cadena de texto vacía
var booSpam2 = !spam2;
/*devuelve verdadero porque la cadena de texto vacia al convertirse en un booleano se devuelve como falsa y lo contrario 
se devuelve como verdadero.


2. Desde la carpeta `Prep` en la carpeta donde clonaste el repo, ingresa el comando   npm test JSII.test.js 
para correr los tests automatizados. Al principio, todos los tests estarán fallados/rotos. Encontrarás las 
funciones para hacer pasar los tests en el archivo `homework.js`.

### Aca tendras acceso a las 
[Soluciones](https://github.com/atralice/Curso.Prep.Henry/blob/solution/03-JS-II/homework/homework.js)